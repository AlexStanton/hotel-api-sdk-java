/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package com.hotelbeds.distribution.hotel_api_model.auto.annotation.validators;

/*
 * #%L
 * Hotel API SDK Model
 * %%
 * Copyright (C) 2015 HOTELBEDS TECHNOLOGY, S.L.U.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */


import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import com.hotelbeds.distribution.hotel_api_model.auto.common.SimpleTypes;
import com.hotelbeds.distribution.hotel_api_model.auto.model.Filter;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class ValidLimitFilterValidator implements ConstraintValidator<ValidLimitFilter, Filter> {
    @Override
    public void initialize(final ValidLimitFilter constraintAnnotation) {
        // empty method
    }

    @Override
    public boolean isValid(final Filter filter, final ConstraintValidatorContext context) {
        boolean result = true;
        if (filter != null) {
            if (filter.getMinRate() != null && filter.getMaxRate() != null && filter.getMinRate().compareTo(filter.getMaxRate()) > 0) {
                context.buildConstraintViolationWithTemplate(SimpleTypes.WRONG_LIMITS_PRICE_RANGE_MESSAGE).addConstraintViolation();
                result = false;
                log.info(SimpleTypes.WRONG_LIMITS_PRICE_RANGE_MESSAGE + " , filter: " + filter.toString());
            } else if (filter.getMinCategory() != null && filter.getMaxCategory() != null) {
                if (filter.getMinCategory() > filter.getMaxCategory()) {
                    context.disableDefaultConstraintViolation();
                    context.buildConstraintViolationWithTemplate(SimpleTypes.WRONG_LIMITS_CATEGORY_RANGE_MESSAGE).addConstraintViolation();
                    result = false;
                    log.info(SimpleTypes.WRONG_LIMITS_CATEGORY_RANGE_MESSAGE + " , filter: " + filter.toString());
                }
            }
        }
        return result;
    }
}
