/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package com.hotelbeds.distribution.hotel_api_model.auto.annotation.validators;

/*
 * #%L
 * Hotel API SDK Model
 * %%
 * Copyright (C) 2015 HOTELBEDS TECHNOLOGY, S.L.U.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */


import java.util.List;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import com.hotelbeds.distribution.hotel_api_model.auto.common.SimpleTypes.HotelbedsCustomerType;
import com.hotelbeds.distribution.hotel_api_model.auto.model.Occupancy;
import com.hotelbeds.distribution.hotel_api_model.auto.model.Pax;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class ValidOccupanciesValidator implements ConstraintValidator<ValidOccupancies, List<Occupancy>> {
    private int maxRooms;

    @Override
    public void initialize(final ValidOccupancies constraintAnnotation) {
        maxRooms = constraintAnnotation.maxRooms();
    }

    @Override
    public boolean isValid(final List<Occupancy> value, final ConstraintValidatorContext context) {
        context.disableDefaultConstraintViolation();
        boolean result = true;
        if (value != null && !value.isEmpty()) {
            int rooms = 0;
            for (final Occupancy occupancy : value) {
                rooms += occupancy.getRooms();
                int childrenByPax = 0;
                int adultsByPax = 0;
                if (occupancy.getPaxes() != null) {
                    for (final Pax pax : occupancy.getPaxes()) {
                        if (HotelbedsCustomerType.CH.equals(pax.getType())) {
                            childrenByPax++;
                            if (pax.getAge() == null) {
                                context.buildConstraintViolationWithTemplate(
                                    "{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.Occupancy.children.ages.message}")
                                    .addConstraintViolation();
                                result = false;
                                log.info("The age of children is mandatory. Pax: " + pax.toString());
                                break;
                            }
                        } else if (HotelbedsCustomerType.AD.equals(pax.getType())) {
                            adultsByPax++;
                        }
                    }
                }
                if (result
                    && occupancy.getChildren() != null
                    && ((occupancy.getChildren() == 0 && childrenByPax > 0) || (occupancy.getChildren() > 0 && !occupancy.getChildren().equals(
                        childrenByPax)))) {
                    context.buildConstraintViolationWithTemplate(
                        "{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.Occupancy.children.number.message}").addConstraintViolation();
                    result = false;
                    log.info("The number of children is wrong, occupancy children: " + occupancy.getChildren() + " , childrenByPax: " + childrenByPax);
                    break;
                }
                if (result && occupancy.getAdults() != null && adultsByPax > occupancy.getAdults()) {
                    context.buildConstraintViolationWithTemplate(
                        "{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.Occupancy.adults.number.message}").addConstraintViolation();
                    result = false;
                    log.info("The number of adults is wrong, occupancy adults: " + occupancy.getAdults() + " , adultsByPax: " + adultsByPax);
                    break;
                }
            }
            if (result && rooms > maxRooms) {
                // [API-1329]
                context.buildConstraintViolationWithTemplate(
                    "{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.Occupancy.rooms.number.message}").addConstraintViolation();
                log.info("The number of rooms must be less than or equal to " + maxRooms + " , rooms: " + rooms);
                result = false;
            }
        }
        return result;
    }
}
