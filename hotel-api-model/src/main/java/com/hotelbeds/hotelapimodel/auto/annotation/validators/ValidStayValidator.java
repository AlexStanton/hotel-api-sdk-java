/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package com.hotelbeds.hotelapimodel.auto.annotation.validators;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import com.hotelbeds.hotelapimodel.auto.model.Stay;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class ValidStayValidator implements ConstraintValidator<ValidStay, Stay> {
    private long maxDaysRange;

    @Override
    public void initialize(final ValidStay constraintAnnotation) {
        maxDaysRange = constraintAnnotation.maxDaysRange();
    }

    @Override
    public boolean isValid(final Stay stay, final ConstraintValidatorContext context) {
        boolean result = true;
        if (stay != null && stay.getCheckIn() != null && stay.getCheckOut() != null) {
            context.disableDefaultConstraintViolation();
            if (stay.getCheckIn().isEqual(stay.getCheckOut()) || stay.getCheckIn().isAfter(stay.getCheckOut())) {
                context.buildConstraintViolationWithTemplate("{com.hotelbeds.Stay.dates.before.message}").addConstraintViolation();
                result = false;
                log.info("CheckIn must be prior to checkOut date, checkin: " + stay.getCheckIn() + " , checkout: " + stay.getCheckOut());
            } else if (!isValidDateRange(stay.getCheckIn(), stay.getCheckOut())) {
                context.buildConstraintViolationWithTemplate("{com.hotelbeds.Stay.dates.range.message}").addConstraintViolation();
                result = false;
                log.info("The number of nights must be less than or equal to " + maxDaysRange + ", checkin: " + stay.getCheckIn() + " , checkout: "
                    + stay.getCheckOut());
            }
        }
        return result;
    }

    private boolean isValidDateRange(LocalDate checkIn, LocalDate checkOut) {
        final long days = ChronoUnit.DAYS.between(checkIn, checkOut);
        boolean result = true;
        if (Long.valueOf(days).compareTo(maxDaysRange) > 0) {
            result = false;
        }
        return result;
    }
}
