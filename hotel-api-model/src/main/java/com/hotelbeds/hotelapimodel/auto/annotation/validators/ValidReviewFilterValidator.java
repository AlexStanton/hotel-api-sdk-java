/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package com.hotelbeds.hotelapimodel.auto.annotation.validators;

import java.util.List;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import com.hotelbeds.hotelapimodel.auto.model.ReviewFilter;

import lombok.extern.slf4j.Slf4j;

/**
 * The Class ValidReviewFilterValidator.
 */
@Slf4j
public class ValidReviewFilterValidator implements ConstraintValidator<ValidReviewFilter, List<ReviewFilter>> {

    @Override
    public void initialize(ValidReviewFilter constraintAnnotation) {
        // empty method
    }

    @Override
    public boolean isValid(List<ReviewFilter> value, ConstraintValidatorContext context) {
        context.disableDefaultConstraintViolation();
        boolean result = true;
        if (value != null) {
            for (ReviewFilter review : value) {
                if (isNotNullRateRange(review)) {
                    context.buildConstraintViolationWithTemplate("{com.hotelbeds.ReviewFilter.rates.null.message}").addConstraintViolation();
                    result = false;
                    log.debug("MaxRate and MinRate can not be null at same time, maxRate: {} , minRate: {}", review.getMaxRate(),
                            review.getMinRate());
                } else if (isMaxRateBiggerOrEqualsMinRate(result, review)) {
                    context.buildConstraintViolationWithTemplate("{com.hotelbeds.ReviewFilter.rates.value.message}").addConstraintViolation();
                    result = false;
                    log.debug("Wrong Rates value. MaxRate should be bigger or equals than MinRate, maxRate: {} , minRate: {}", review.getMaxRate(),
                            review.getMinRate());
                }
                if (isReviewCountNotEmpty(review)) {
                    context.buildConstraintViolationWithTemplate("{com.hotelbeds.ReviewFilter.reviewCounts.zero.message}").addConstraintViolation();
                    result = false;
                    log.debug("Wrong ReviewCounts value. MaxReviewCount and MinReviewCount can not have value 0 or empty, maxRate: {} , minRate: {}",
                            review.getMaxRate(), review.getMinRate());
                }
            }
        }
        return result;
    }

    private boolean isNotNullRateRange(ReviewFilter review) {
        return review.getMaxRate() == null && review.getMinRate() == null;
    }

    private boolean isReviewCountNotEmpty(ReviewFilter review) {
        return review.getMinReviewCount() != null && review.getMinReviewCount() == 0;
    }

    private boolean isMaxRateBiggerOrEqualsMinRate(boolean result, ReviewFilter review) {
        return result && review.getMaxRate() != null && review.getMinRate() != null
                && (review.getMaxRate().compareTo(review.getMinRate()) < 0);
    }
}
