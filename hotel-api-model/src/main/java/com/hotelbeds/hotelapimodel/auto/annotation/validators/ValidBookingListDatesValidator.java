/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package com.hotelbeds.hotelapimodel.auto.annotation.validators;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import com.hotelbeds.hotelapimodel.auto.messages.BookingListRQ;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class ValidBookingListDatesValidator implements ConstraintValidator<ValidBookingListDates, Object> {
    private long maxDaysRange;

    @Override
    public void initialize(ValidBookingListDates constraintAnnotation) {
        maxDaysRange = constraintAnnotation.maxDaysRange();
    }

    @Override
    public boolean isValid(Object value, ConstraintValidatorContext context) {
        if (!(value instanceof BookingListRQ)) {
            throw new IllegalArgumentException("Expected a parameter of type XMLBookingListRQ or JSONBookingListRQ");
        }
        boolean result = true;
        if (value instanceof BookingListRQ) {
            LocalDate start = ((BookingListRQ) value).getStart();
            LocalDate end = ((BookingListRQ) value).getEnd();
            context.disableDefaultConstraintViolation();
            if (start.isAfter(end)) {
                context.buildConstraintViolationWithTemplate("{com.hotelbeds.BookingListRQ.dates.before.message}").addConstraintViolation();
                result = false;
                log.info("Start date must be prior to End date, start: " + start.toString() + " , end: " + end.toString());
            } else if (!isValidDateRange(start, end)) {
                context.buildConstraintViolationWithTemplate("{com.hotelbeds.BookingListRQ.dates.range.message}").addConstraintViolation();
                result = false;
                log.info("Days between Start and End parameters must be less than or equal to " + maxDaysRange + ", start: " + start.toString()
                    + " , end: " + end.toString());
            }
        } else {
            result = false;
        }
        return result;
    }

    private boolean isValidDateRange(LocalDate checkIn, LocalDate checkOut) {
        boolean result = true;
        final long days = ChronoUnit.DAYS.between(checkIn, checkOut);
        if (Long.valueOf(days).compareTo(maxDaysRange) > 0) {
            result = false;
        }
        return result;
    }
}
