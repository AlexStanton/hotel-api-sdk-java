/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package com.hotelbeds.hotelapimodel.auto.annotation.validators;

/*
 * #%L
 * HotelAPI Model
 * %%
 * Copyright (C) 2015 - 2016 HOTELBEDS TECHNOLOGY, S.L.U.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */


import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import com.hotelbeds.hotelapimodel.auto.messages.AvailabilityRQ;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class ValidAvailabilityValidator implements ConstraintValidator<ValidAvailability, AvailabilityRQ> {
    @Override
    public void initialize(final ValidAvailability constraintAnnotation) {
        // empty method
    }

    @Override
    public boolean isValid(final AvailabilityRQ availabilityRQ, final ConstraintValidatorContext context) {
        boolean result = true;
        context.disableDefaultConstraintViolation();
        result = validOnlyUniqueFilterDestinationOrGeolocationOrHotels(availabilityRQ, context);
        return result;
    }

    private boolean validOnlyUniqueFilterDestinationOrGeolocationOrHotels(final AvailabilityRQ availabilityRQ,
        final ConstraintValidatorContext context) {
        boolean result = true;
        int found = 0;
        if (availabilityRQ.getDestination() != null) {
            found = found + 1;
        }
        if (availabilityRQ.getGeolocation() != null) {
            found = found + 1;
        }
        if (availabilityRQ.getHotelsFilter() != null) {
            found = found + 1;
        }
        if (found == 0 || found > 1) {
            context
                .buildConstraintViolationWithTemplate(
                    "{com.hotelbeds.AvailabilityFilter."
                        + "validOnlyUniqueFilterDestinationOrGeolocationOrHotels.message}")
                .addConstraintViolation();
            result = false;
            log.info("The request must have unique filter. Options: Destination, Geolocation, Hotels, destination: +"
                + availabilityRQ.getDestination() + " , geolocation: " + availabilityRQ.getGeolocation() + " , hotelsFilter: "
                + availabilityRQ.getHotelsFilter());
        }
        return result;
    }
}
