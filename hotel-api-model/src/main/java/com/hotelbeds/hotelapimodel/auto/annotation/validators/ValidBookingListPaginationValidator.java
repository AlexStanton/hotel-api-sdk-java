/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package com.hotelbeds.hotelapimodel.auto.annotation.validators;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import com.hotelbeds.hotelapimodel.auto.messages.BookingListRQ;

import lombok.extern.slf4j.Slf4j;

/**
 * The Class ValidBookingListPaginationValidator.
 */
@Slf4j
public class ValidBookingListPaginationValidator implements ConstraintValidator<ValidBookingListPagination, BookingListRQ> {
    private long maxBookingsRange;

    @Override
    public void initialize(ValidBookingListPagination constraintAnnotation) {
        maxBookingsRange = constraintAnnotation.maxBookingsRange();
    }

    @Override
    public boolean isValid(BookingListRQ value, ConstraintValidatorContext context) {
        boolean result = true;
        if (value != null) {
            Integer from = value.getFrom();
            Integer to = value.getTo();
            context.disableDefaultConstraintViolation();
            if (from != null && from <= 0) {
                context.buildConstraintViolationWithTemplate("{com.hotelbeds.BookingListRQ.pagination.minimum.message}").addConstraintViolation();
                log.info("The minimun value for the parameter From is 1, from: " + from);
                result = false;
            } else if (from != null && to != null && from.compareTo(to) > 0) {
                context.buildConstraintViolationWithTemplate("{com.hotelbeds.BookingListRQ.pagination.before.message}").addConstraintViolation();
                log.info("The parameter To must be greater than From, from: " + from + " , to: " + to);
                result = false;
            } else if (from != null && to != null && !isValidBookingsRange(from, to)) {
                context.buildConstraintViolationWithTemplate("{com.hotelbeds.BookingListRQ.pagination.range.message}").addConstraintViolation();
                log.info("The number of bookings between To and From parameters must be less than or equal to " + maxBookingsRange + ", from: " + from
                    + " , to: " + to);
                result = false;
            }
        }
        return result;
    }

    private boolean isValidBookingsRange(Integer from, Integer to) {
        // from and to are inclusive
        final long bookings = to - from + 1L;
        boolean result = true;
        if (bookings > maxBookingsRange) {
            result = false;
        }
        return result;
    }
}
